import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

import { NestExpressApplication } from '@nestjs/platform-express';
import { Logger } from '@nestjs/common';

async function bootstrap() {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  function resolvePort(): number {
    const argvPort = process.argv
      .slice(2)
      .map(arg => {
        if (arg.startsWith('--port=')) return arg.split('=')[1];
        if (arg === '--port') return null;
        return null;
      })
      .filter(Boolean)[0];

    const nextArgPortIndex = process.argv.indexOf('--port');
    let nextArgPort: string | undefined;
    if (nextArgPortIndex !== -1 && process.argv[nextArgPortIndex + 1]) {
      nextArgPort = process.argv[nextArgPortIndex + 1];
    }

    const portStr = argvPort || nextArgPort || process.env.PORT;
    const port = portStr ? parseInt(portStr, 10) : 5890;
    return isNaN(port) ? 5890 : port;
  }

  let port = resolvePort();
  let serverStarted = false;

  while (!serverStarted) {
    try {
      const app = await NestFactory.create<NestExpressApplication>(AppModule);

      app.set('query parser', 'extended');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger
      const config = new DocumentBuilder()
        .setTitle('Trade Hub API')
        .setDescription('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Trade Hub')
        .setVersion('1.0')
        .build();

      app.enableCors({
        origin: [
          /^http:\/\/localhost:(3[0-9]{3}|[4-5][0-9]{3}|6000)$/, // –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø–æ—Ä—Ç—ã —Å 3000 –¥–æ 6000 –Ω–∞ localhost
          /^http:\/\/192\.168\.0\.\d+:(3[0-9]{3}|[4-5][0-9]{3}|6000)$/, // –†–∞–∑—Ä–µ—à–∞–µ—Ç –ª—é–±–æ–π IP –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 192.168.0.0-255 —Å –ø–æ—Ä—Ç–∞–º–∏ 3000-6000
        ],
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
        credentials: true,
      });

      const document = SwaggerModule.createDocument(app, config);
      SwaggerModule.setup('api', app, document);
      
      Logger.debug(`üìù Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${port}/api`);
      Logger.log(`üöÄ –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: ${port}`);

      await app.init();
      await app.listen(port);
      serverStarted = true;
    } catch (error: unknown) {
      Logger.error(
        `‚ùå Error starting server on port ${port}: ${(error as Error).message}`,
        (error as Error).stack,
      );
      port++;
      if (port > 65535) {
        Logger.error(`‚ùå Could not start server after multiple port retries.`);
        break;
      }
    }
  }
}

bootstrap();
